<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">
	<!-- Root Context: defines shared resources visible to all other web components -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:db.properties" />
		<!-- classpath:는 src/main/resources위치를 찾는다 -->
	</bean>

	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${driverClassName}" />
		<property name="url" value="${url}" />
		<property name="username" value="${username}" />
		<property name="password" value="${password}" />
	</bean>

<!-- 	<bean id="dataSource" class="net.sf.log4jdbc.Log4jdbcProxyDataSource"> -->
<!-- 		<constructor-arg ref="dataSourceSpied" /> -->
<!-- 		<property name="logFormatter"> -->
<!-- 			<bean class="net.sf.log4jdbc.tools.Log4JdbcCustomFormatter"> -->
<!-- 				<property name="loggingType" value="MULTI_LINE" /> -->
<!-- 				<property name="sqlPrefix" value="SQL:::" /> -->
<!-- 			</bean> -->
<!-- 		</property> -->
<!-- 	</bean> -->

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:/mybatisConfig/mybatisConfig.xml" />
		<property name="mapperLocations" value="classpath:/com/pknu/mapper/**/*.xml"></property>
	</bean>

	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSessionFactory" />
	</bean>
	<!-- <bean class="org.mybatis.spring.mapper.MapperFactoryBean" id="bbsDao"> 
		<property name="mapperInterface" value="com.pknu.bbs.bbs.dao.BBSDao"/> <property 
		name="sqlSessionFactory" ref="sqlSessionFactory"/> </bean> <bean class="org.mybatis.spring.mapper.MapperFactoryBean" 
		id="commentDao"> <property name="mapperInterface" value="com.pknu.bbs.comment.dao.CommentDao"/> 
		<property name="sqlSessionFactory" ref="sqlSessionFactory"/> </bean> -->
	<mybatis-spring:scan base-package="com.pknu.bbs.bbs.dao, com.pknu.bbs.comment.dao" />
	<!-- 서블릿에서 스캔한 빈과 중복되어서 에러발생 -->
	<!-- <mybatis-spring:scan base-package="com.pknu.bbs"/> -->
	<!-- ======================== -->

	<bean id="pageSize" class="java.lang.Integer">
		<constructor-arg>
			<value>10</value>
		</constructor-arg>
	</bean>
	<bean id="pageBlock" class="java.lang.Integer">
		<constructor-arg value="10"></constructor-arg>
	</bean>
	<!-- id가 무조건 "multipartResolver"여야 한다. Resolver가 파일로 받아준다. -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="20000000" />
	</bean>
	<!-- <bean id="uploadDirResource" class="org.springframework.core.io.FileSystemResource"> -->
	<!-- <constructor-arg value="d://uploadKch//"/> -->
	<!-- </bean> -->
	<bean id="saveDir" class="java.lang.String">
		<constructor-arg value="d://uploadKch//" />
	</bean> 

	<!-- Transaction Manager -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- @Transactional을 인식시키기 위한 조치  -->
	<tx:annotation-driven transaction-manager="transactionManager"/>
<!-- 	우선순위는 메서드에 걸려있는 @Transactional이 높다. Bean은 후순위. 그렇기에 클래스에 @Transactional을 넣고 -->
<!-- 	메서드에 @Transactional을 넣은뒤 세부조정을 하면 메서드에 걸린@Transactional이 먼저 실행된다. -->

<!-- 	@Transactional는 프락시 서버가 인터페이스를 타겟으로 하여 동작하기 때문에 컨트롤러에 붙이면 원래는 동작하지 않는다.  -->
<!-- 	그래서 Service딴에 @Transactional을 붙이는 것이 정석이다. -->
<!-- 	컨트롤러에서 동작하게 하기 위해서는 proxy-target-class="true"라는 속성을 annotation-driven에 붙여야 한다.  -->
<!-- 	근데...이상하게 안붙여도 컨트롤러에 붙여도 작동이 된다.(Spring 버전의 문제?) -->
</beans>